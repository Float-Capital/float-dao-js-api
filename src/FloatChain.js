// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ethers = require("ethers");
var FloatUtil = require("./FloatUtil.js");
var FloatEthers = require("./FloatEthers.js");
var FloatContracts = require("./FloatContracts.js");

function fromInt(prim) {
  return Ethers.BigNumber.from(prim);
}

function wrapSideP(side) {
  return {
          TAG: /* P */0,
          _0: side
        };
}

function wrapSideW(side) {
  return {
          TAG: /* W */1,
          _0: side
        };
}

function make(p) {
  return {
          provider: p
        };
}

function makeWrap(p) {
  return {
          TAG: /* P */0,
          _0: {
            provider: p
          }
        };
}

function makeDefault(chainId) {
  return {
          provider: FloatUtil.makeDefaultProvider(FloatUtil.getChainConfigUsingId(chainId))
        };
}

function makeDefaultWrap(chainId) {
  var p = FloatUtil.makeDefaultProvider(FloatUtil.getChainConfigUsingId(chainId));
  return {
          TAG: /* P */0,
          _0: {
            provider: p
          }
        };
}

var WithProvider = {
  make: make,
  makeWrap: makeWrap,
  makeDefault: makeDefault,
  makeDefaultWrap: makeDefaultWrap
};

function make$1(w) {
  return {
          wallet: w
        };
}

function makeWrap$1(w) {
  return {
          TAG: /* W */1,
          _0: {
            wallet: w
          }
        };
}

var WithWallet = {
  make: make$1,
  makeWrap: makeWrap$1
};

function makeLongShortContract(p, c) {
  return FloatContracts.LongShort.make(Ethers.utils.getAddress(c.contracts.longShort.address), p);
}

function updateSystemStateMulti(wallet, config, marketIndexes) {
  var partial_arg = marketIndexes.map(function (i) {
        return Ethers.BigNumber.from(i);
      });
  var partial_arg$1 = makeLongShortContract(FloatEthers.wrapWallet(wallet), config);
  return function (param) {
    return partial_arg$1.updateSystemStateMulti(partial_arg, param);
  };
}

function contracts(chain) {
  var tmp;
  tmp = chain.TAG === /* P */0 ? FloatUtil.getChainConfig(FloatEthers.wrapProvider(chain._0.provider)) : FloatUtil.getChainConfig(FloatEthers.wrapProvider(chain._0.wallet.provider));
  return tmp.then(function (c) {
              return c.contracts;
            });
}

function updateSystemStateMulti$1(chain, marketIndexes, txOptions) {
  return FloatUtil.getChainConfig(FloatEthers.wrapWallet(chain.wallet)).then(function (config) {
              return updateSystemStateMulti(chain.wallet, config, marketIndexes)(txOptions);
            });
}

exports.fromInt = fromInt;
exports.wrapSideP = wrapSideP;
exports.wrapSideW = wrapSideW;
exports.WithProvider = WithProvider;
exports.WithWallet = WithWallet;
exports.makeLongShortContract = makeLongShortContract;
exports.contracts = contracts;
exports.updateSystemStateMulti = updateSystemStateMulti$1;
/* ethers Not a pure module */
