// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ethers = require("ethers");
var Ethers$FloatJsClient = require("./demo/Ethers.js");
var Contracts$FloatJsClient = require("./demo/Contracts.js");
var ConfigMain$FloatJsClient = require("./ConfigMain.js");
var MarketSide$FloatJsClient = require("./MarketSide.js");

function makeLongShortContract(p) {
  return Contracts$FloatJsClient.LongShort.make(Ethers.utils.getAddress(ConfigMain$FloatJsClient.polygonConfig.longShortContractAddress), p);
}

function leverage(p, marketIndex) {
  return makeLongShortContract(Ethers$FloatJsClient.wrapProvider(p)).marketLeverage_e18(marketIndex);
}

function syntheticTokenPrices(p, marketIndex) {
  return Promise.all([
                MarketSide$FloatJsClient.syntheticTokenPrice(p, marketIndex, true),
                MarketSide$FloatJsClient.syntheticTokenPrice(p, marketIndex, false)
              ]).then(function (param) {
              return {
                      long: param[0],
                      short: param[1]
                    };
            });
}

function exposures(p, marketIndex) {
  return Promise.all([
                MarketSide$FloatJsClient.exposure(p, marketIndex, true),
                MarketSide$FloatJsClient.exposure(p, marketIndex, false)
              ]).then(function (param) {
              return {
                      long: param[0],
                      short: param[1]
                    };
            });
}

function unconfirmedExposures(p, marketIndex) {
  return Promise.all([
                MarketSide$FloatJsClient.unconfirmedExposure(p, marketIndex, true),
                MarketSide$FloatJsClient.unconfirmedExposure(p, marketIndex, false)
              ]).then(function (param) {
              return {
                      long: param[0],
                      short: param[1]
                    };
            });
}

function positions(p, marketIndex, address) {
  return Promise.all([
                MarketSide$FloatJsClient.positions(p, marketIndex, true, address),
                MarketSide$FloatJsClient.positions(p, marketIndex, false, address)
              ]).then(function (param) {
              return {
                      long: param[0],
                      short: param[1]
                    };
            });
}

function stakedPositions(p, marketIndex, address) {
  return Promise.all([
                MarketSide$FloatJsClient.stakedPositions(p, marketIndex, true, address),
                MarketSide$FloatJsClient.stakedPositions(p, marketIndex, false, address)
              ]).then(function (param) {
              return {
                      long: param[0],
                      short: param[1]
                    };
            });
}

function unsettledPositions(p, marketIndex, address) {
  return Promise.all([
                MarketSide$FloatJsClient.unsettledPositions(p, marketIndex, true, address),
                MarketSide$FloatJsClient.unsettledPositions(p, marketIndex, false, address)
              ]).then(function (param) {
              return {
                      long: param[0],
                      short: param[1]
                    };
            });
}

function makeWithProvider(p, marketIndex) {
  return {
          getLeverage: (function (param) {
              return leverage(p, marketIndex);
            }),
          getFundingRateMultiplier: (function (param) {
              return MarketSide$FloatJsClient.fundingRateMultiplier(p, marketIndex);
            }),
          getSyntheticTokenPrices: (function (param) {
              return syntheticTokenPrices(p, marketIndex);
            }),
          getExposures: (function (param) {
              return exposures(p, marketIndex);
            }),
          getUnconfirmedExposures: (function (param) {
              return unconfirmedExposures(p, marketIndex);
            }),
          getPositions: (function (param) {
              return positions(p, marketIndex, param);
            }),
          getStakedPositions: (function (param) {
              return stakedPositions(p, marketIndex, param);
            }),
          getUnsettledPositions: (function (param) {
              return unsettledPositions(p, marketIndex, param);
            }),
          getSide: (function (isLong) {
              return MarketSide$FloatJsClient.makeWithProvider(p, marketIndex, isLong);
            })
        };
}

exports.makeLongShortContract = makeLongShortContract;
exports.leverage = leverage;
exports.syntheticTokenPrices = syntheticTokenPrices;
exports.exposures = exposures;
exports.unconfirmedExposures = unconfirmedExposures;
exports.positions = positions;
exports.stakedPositions = stakedPositions;
exports.unsettledPositions = unsettledPositions;
exports.makeWithProvider = makeWithProvider;
/* ethers Not a pure module */
