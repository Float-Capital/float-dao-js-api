// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Chain = require("./Chain.js");
var Curry = require("rescript/lib/js/curry.js");
var Ethers = require("ethers");
var CONSTANTS = require("./demo/CONSTANTS.js");
var MarketSide = require("./MarketSide.js");
var FloatConfig = require("@float-dao/config/src/FloatConfig.js");
var SecretsManagerJs = require("../secretsManager.js");

var env = process.env;

var mnemonic = SecretsManagerJs.mnemonic;

var providerUrlOther = SecretsManagerJs.providerUrl;

function connectToNewWallet(provider, mnemonic) {
  return new (Ethers.Wallet.fromMnemonic)(mnemonic, "m/44'/60'/0'/0/0").connect(provider);
}

function run(param) {
  var providerUrl = FloatConfig.avalanche.rpcEndopint;
  var chainId = FloatConfig.avalanche.networkId;
  MarketSide.makeWithProvider(new (Ethers.providers.JsonRpcProvider)(providerUrl, chainId), 1, false);
  var maxFeePerGas = Ethers.BigNumber.from(62).mul(CONSTANTS.oneGweiInWei);
  var maxPriorityFeePerGas = Ethers.BigNumber.from(34).mul(CONSTANTS.oneGweiInWei);
  var gasLimit = Ethers.BigNumber.from(1000000);
  maxFeePerGas.toString();
  maxPriorityFeePerGas.toString();
  gasLimit.toString();
  var chain = Chain.makeWithDefaultProvider(43114);
  var connectedChain = Curry._1(chain.connect, connectToNewWallet(new (Ethers.providers.JsonRpcProvider)(providerUrl, 43114), mnemonic));
  Curry._1(Curry._1(connectedChain.getMarket, 1).getLeverage, undefined).then(function (m) {
        console.log(m);
        
      });
  
}

run(undefined);

exports.env = env;
exports.mnemonic = mnemonic;
exports.providerUrlOther = providerUrlOther;
exports.connectToNewWallet = connectToNewWallet;
exports.run = run;
/* env Not a pure module */
