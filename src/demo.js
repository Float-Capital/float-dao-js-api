// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Ethers = require("ethers");
var CONSTANTS = require("./demo/CONSTANTS.js");
var FloatClient = require("./FloatClient.js");
var FloatConfig = require("@float-dao/config/src/FloatConfig.js");
var SecretsManagerJs = require("../secretsManager.js");

var env = process.env;

var mnemonic = SecretsManagerJs.mnemonic;

var providerUrlOther = SecretsManagerJs.providerUrl;

function connectToNewWallet(provider, mnemonic) {
  return new (Ethers.Wallet.fromMnemonic)(mnemonic, "m/44'/60'/0'/0/0").connect(provider);
}

function run(param) {
  var providerUrl = FloatConfig.avalanche.rpcEndopint;
  var chainId = FloatConfig.avalanche.networkId;
  new (Ethers.providers.JsonRpcProvider)(providerUrl, chainId);
  connectToNewWallet(new (Ethers.providers.JsonRpcProvider)(providerUrl, chainId), mnemonic);
  var maxFeePerGas = Ethers.BigNumber.from(62).mul(CONSTANTS.oneGweiInWei);
  var maxPriorityFeePerGas = Ethers.BigNumber.from(34).mul(CONSTANTS.oneGweiInWei);
  var gasLimit = Ethers.BigNumber.from(1000000);
  maxFeePerGas.toString();
  maxPriorityFeePerGas.toString();
  gasLimit.toString();
  var floatClient = FloatClient.make(undefined);
  var chain = Curry._1(floatClient.getChain, chainId);
  chain.contracts.then(function (c) {
        console.log("LongShort address:", c.longShort.address);
        
      });
  var market = Curry._1(chain.getMarket, 1);
  Curry._1(market.getFundingRateMultiplier, undefined).then(function (a) {
        console.log("Funding rate multiplier for market ".concat((1).toString()).concat(":"), a);
        
      });
  Curry._1(market.getLeverage, undefined).then(function (m) {
        console.log("Leverage for market ".concat((1).toString()).concat(":"), m);
        
      });
  var sideName = "short";
  var marketSide = Curry._1(market.getSide, false);
  Curry._1(marketSide.getFundingRateApr, undefined).then(function (a) {
        console.log("Funding rate APR for marketSide ".concat(sideName).concat(":"), a);
        
      });
  Curry._1(marketSide.getValue, undefined).then(function (a) {
        console.log("Value of marketSide ".concat(sideName).concat(":"), a.toString());
        
      });
  Curry._1(marketSide.getExposure, undefined).then(function (a) {
        console.log("Exposure of marketSide".concat(sideName).concat(":"), a.toString());
        
      });
  Curry._1(marketSide.getUnconfirmedExposure, undefined).then(function (a) {
        console.log("Unconfirmed exposure of marketSide".concat(sideName).concat(":"), a.toString());
        
      });
  Curry._1(marketSide.getPositions, Ethers.utils.getAddress("0x380d3d688fd65ef6858f0e094a1a9bba03ad76a3")).then(function (a) {
        console.log("Synth token amount for 0x38.. in marketSide".concat(sideName).concat(":"), a.synthToken.toString());
        
      });
  
}

run(undefined);

exports.env = env;
exports.mnemonic = mnemonic;
exports.providerUrlOther = providerUrlOther;
exports.connectToNewWallet = connectToNewWallet;
exports.run = run;
/* env Not a pure module */
