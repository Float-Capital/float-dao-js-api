// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Config = require("./Config.js");
var Ethers = require("./demo/Ethers.js");
var Market = require("./Market.js");
var Ethers$1 = require("ethers");
var Contracts = require("./demo/Contracts.js");

function wrapChainWithProvider(p) {
  return {
          TAG: /* ChainPWrap */0,
          _0: p
        };
}

function wrapChainWithWallet(p) {
  return {
          TAG: /* ChainWWrap */1,
          _0: p
        };
}

function makeLongShortContract(p, c) {
  return Contracts.LongShort.make(Ethers$1.utils.getAddress(c.contracts.longShort.address), p);
}

function updateSystemStateMulti(w, c, marketIndexes) {
  var partial_arg = makeLongShortContract(Ethers.wrapWallet(w), c);
  return function (param) {
    return partial_arg.updateSystemStateMulti(marketIndexes, param);
  };
}

function makeWithWallet(w) {
  return {
          contracts: Config.getChainConfig(Ethers.wrapWallet(w)).then(function (c) {
                return c.contracts;
              }),
          updateSystemState: (function (marketIndexes, txOptions) {
              return Config.getChainConfig(Ethers.wrapWallet(w)).then(function (c) {
                          return updateSystemStateMulti(w, c, marketIndexes)(txOptions);
                        });
            }),
          getMarket: (function (param) {
              return Market.makeWithWallet(w, param);
            })
        };
}

function makeWithProvider(p) {
  return {
          contracts: Config.getChainConfig(Ethers.wrapProvider(p)).then(function (c) {
                return c.contracts;
              }),
          getMarket: (function (param) {
              return Market.makeWithProvider(p, param);
            }),
          connect: makeWithWallet
        };
}

function makeWithDefaultProvider(chainId) {
  var partial_arg = Config.makeDefaultProvider(Config.getChainConfigUsingId(chainId));
  return {
          contracts: Config.getChainConfig(Ethers.wrapProvider(Config.makeDefaultProvider(Config.getChainConfigUsingId(chainId)))).then(function (c) {
                return c.contracts;
              }),
          getMarket: (function (param) {
              return Market.makeWithProvider(partial_arg, param);
            }),
          connect: makeWithWallet
        };
}

function make(pw) {
  if (pw.TAG === /* ProviderWrap */0) {
    return {
            TAG: /* ChainPWrap */0,
            _0: makeWithProvider(pw._0)
          };
  } else {
    return {
            TAG: /* ChainWWrap */1,
            _0: makeWithWallet(pw._0)
          };
  }
}

exports.wrapChainWithProvider = wrapChainWithProvider;
exports.wrapChainWithWallet = wrapChainWithWallet;
exports.makeLongShortContract = makeLongShortContract;
exports.updateSystemStateMulti = updateSystemStateMulti;
exports.makeWithWallet = makeWithWallet;
exports.makeWithProvider = makeWithProvider;
exports.makeWithDefaultProvider = makeWithDefaultProvider;
exports.make = make;
/* Config Not a pure module */
