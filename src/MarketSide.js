// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ethers = require("ethers");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Ethers$FloatJsClient = require("./demo/Ethers.js");
var CONSTANTS$FloatJsClient = require("./demo/CONSTANTS.js");
var Contracts$FloatJsClient = require("./demo/Contracts.js");
var ConfigMain$FloatJsClient = require("./ConfigMain.js");

var min = Ethers$FloatJsClient.BigNumber.min;

function div(prim0, prim1) {
  return prim0.div(prim1);
}

function mul(prim0, prim1) {
  return prim0.mul(prim1);
}

function add(prim0, prim1) {
  return prim0.add(prim1);
}

function sub(prim0, prim1) {
  return prim0.sub(prim1);
}

function makeLongShortContract(p) {
  return Contracts$FloatJsClient.LongShort.make(Ethers.utils.getAddress(ConfigMain$FloatJsClient.polygonConfig.longShortContractAddress), p);
}

function syntheticTokenAddress(p, marketIndex, isLong) {
  return makeLongShortContract(p).syntheticTokens(marketIndex, isLong);
}

function syntheticTokenTotalSupply(p, marketIndex, isLong) {
  return syntheticTokenAddress(p, marketIndex, isLong).then(function (address) {
                  return Promise.resolve(Contracts$FloatJsClient.Synth.make(address, p));
                }).then(function (synth) {
                return synth.totalSupply();
              }).then(function (supply) {
              return supply;
            });
}

function marketSideValues(p, marketIndex) {
  return makeLongShortContract(p).marketSideValueInPaymentToken(marketIndex);
}

function marketSideValue(p, marketIndex, isLong) {
  return makeLongShortContract(p).marketSideValueInPaymentToken(marketIndex).then(function (marketSideValue) {
              if (isLong) {
                return marketSideValue.long;
              } else {
                return marketSideValue.short;
              }
            });
}

function marketSideUnconfirmedDeposits(p, marketIndex, isLong) {
  return makeLongShortContract(p).batched_amountPaymentToken_deposit(marketIndex, isLong);
}

function marketSideUnconfirmedRedeems(p, marketIndex, isLong) {
  return makeLongShortContract(p).batched_amountSyntheticToken_redeem(marketIndex, isLong);
}

function marketSideUnconfirmedShifts(p, marketIndex, isShiftFromLong) {
  return makeLongShortContract(p).batched_amountSyntheticToken_toShiftAwayFrom_marketSide(marketIndex, isShiftFromLong);
}

function getSyntheticTokenPrice(p, marketIndex, isLong) {
  return Promise.all([
                marketSideValue(p, marketIndex, isLong),
                syntheticTokenTotalSupply(p, marketIndex, isLong)
              ]).then(function (param) {
              return param[0].mul(CONSTANTS$FloatJsClient.tenToThe18).div(param[1]);
            });
}

function getExposure(p, marketIndex, isLong) {
  return makeLongShortContract(p).marketSideValueInPaymentToken(marketIndex).then(function (values) {
              var numerator = min(values.long, values.short).mul(CONSTANTS$FloatJsClient.tenToThe18);
              if (isLong) {
                return numerator.div(values.long);
              } else {
                return numerator.div(values.short);
              }
            });
}

function getUnconfirmedExposure(p, marketIndex, isLong) {
  return Promise.all([
                getSyntheticTokenPrice(p, marketIndex, true),
                getSyntheticTokenPrice(p, marketIndex, false),
                marketSideUnconfirmedRedeems(p, marketIndex, true),
                marketSideUnconfirmedRedeems(p, marketIndex, false),
                marketSideUnconfirmedShifts(p, marketIndex, true),
                marketSideUnconfirmedShifts(p, marketIndex, false),
                marketSideUnconfirmedDeposits(p, marketIndex, true),
                marketSideUnconfirmedDeposits(p, marketIndex, false),
                marketSideValue(p, marketIndex, true),
                marketSideValue(p, marketIndex, false)
              ]).then(function (results) {
              var priceLong = Caml_array.get(results, 0);
              var priceShort = Caml_array.get(results, 1);
              var redeemsLong = Caml_array.get(results, 2);
              var redeemsShort = Caml_array.get(results, 3);
              var shiftsFromLong = Caml_array.get(results, 4);
              var shiftsFromShort = Caml_array.get(results, 5);
              var depositsLong = Caml_array.get(results, 6);
              var depositsShort = Caml_array.get(results, 7);
              var valueLong = Caml_array.get(results, 8);
              var valueShort = Caml_array.get(results, 9);
              var unconfirmedValueLong = shiftsFromShort.sub(shiftsFromLong).sub(redeemsLong).mul(priceLong).div(CONSTANTS$FloatJsClient.tenToThe18).add(depositsLong).add(valueLong);
              var unconfirmedValueShort = shiftsFromLong.sub(shiftsFromShort).sub(redeemsShort).mul(priceShort).div(CONSTANTS$FloatJsClient.tenToThe18).add(depositsShort).add(valueShort);
              var numerator = min(unconfirmedValueLong, unconfirmedValueShort).mul(CONSTANTS$FloatJsClient.tenToThe18);
              if (isLong) {
                return numerator.div(unconfirmedValueLong);
              } else {
                return numerator.div(unconfirmedValueShort);
              }
            });
}

function newFloatMarketSide(p, marketIndex, isLong) {
  return {
          getSyntheticTokenPrice: (function (param) {
              return getSyntheticTokenPrice(p, marketIndex, isLong);
            }),
          getExposure: (function (param) {
              return getExposure(p, marketIndex, isLong);
            }),
          getUnconfirmedExposure: (function (param) {
              return getUnconfirmedExposure(p, marketIndex, isLong);
            })
        };
}

var MarketSide = {
  makeLongShortContract: makeLongShortContract,
  syntheticTokenAddress: syntheticTokenAddress,
  syntheticTokenTotalSupply: syntheticTokenTotalSupply,
  marketSideValues: marketSideValues,
  marketSideValue: marketSideValue,
  marketSideUnconfirmedDeposits: marketSideUnconfirmedDeposits,
  marketSideUnconfirmedRedeems: marketSideUnconfirmedRedeems,
  marketSideUnconfirmedShifts: marketSideUnconfirmedShifts,
  getSyntheticTokenPrice: getSyntheticTokenPrice,
  getExposure: getExposure,
  getUnconfirmedExposure: getUnconfirmedExposure,
  newFloatMarketSide: newFloatMarketSide
};

exports.min = min;
exports.div = div;
exports.mul = mul;
exports.add = add;
exports.sub = sub;
exports.MarketSide = MarketSide;
/* ethers Not a pure module */
